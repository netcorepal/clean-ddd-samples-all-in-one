// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TradingEngine.Infrastructure;

#nullable disable

namespace TradingEngine.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("TradingEngine.Domain.AggregatesModel.DeliverAggregate.DeliverRecord", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("deliverrecord", (string)null);
                });

            modelBuilder.Entity("TradingEngine.Domain.AggregatesModel.OrderAggregate.Order", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("Paid")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdateTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("order", (string)null);
                });

            modelBuilder.Entity("TradingEngine.Domain.AggregatesModel.RiskControlAggregate.RiskControl", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)")
                        .HasComment("风险控制ID");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasComment("创建时间");

                    b.Property<decimal>("CurrentPosition")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasComment("当前持仓");

                    b.Property<decimal>("DailyLoss")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasComment("当日损失");

                    b.Property<decimal>("DailyLossLimit")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasComment("日损失限制");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasComment("是否激活");

                    b.Property<DateTimeOffset?>("LastAssessmentAt")
                        .HasColumnType("datetime(6)")
                        .HasComment("最后评估时间");

                    b.Property<int>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPositionLimit")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasComment("总持仓限制");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasComment("用户ID");

                    b.HasKey("Id");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_RiskControls_IsActive");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("IX_RiskControls_UserId");

                    b.ToTable("RiskControls", (string)null);
                });

            modelBuilder.Entity("TradingEngine.Domain.AggregatesModel.SettlementAggregate.Settlement", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)")
                        .HasComment("结算ID");

                    b.Property<DateTimeOffset?>("CompletedAt")
                        .HasColumnType("datetime(6)")
                        .HasComment("完成时间");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasComment("创建时间");

                    b.Property<string>("FailureReason")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasComment("失败原因");

                    b.Property<DateTimeOffset?>("ProcessedAt")
                        .HasColumnType("datetime(6)")
                        .HasComment("处理时间");

                    b.Property<int>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("SettlementDate")
                        .HasColumnType("datetime(6)")
                        .HasComment("结算日期");

                    b.Property<int>("SettlementType")
                        .HasColumnType("int")
                        .HasComment("结算类型：1-交易结算，2-分红结算，3-费用结算，4-保证金调整");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasComment("结算状态：1-待处理，2-处理中，3-已完成，4-失败，5-已取消");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasComment("结算总金额");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasComment("用户ID");

                    b.HasKey("Id");

                    b.HasIndex("SettlementDate")
                        .HasDatabaseName("IX_Settlements_SettlementDate");

                    b.HasIndex("SettlementType")
                        .HasDatabaseName("IX_Settlements_SettlementType");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Settlements_Status");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_Settlements_UserId");

                    b.ToTable("Settlements", (string)null);
                });

            modelBuilder.Entity("TradingEngine.Domain.AggregatesModel.TradeAggregate.Trade", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)")
                        .HasComment("交易ID");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasComment("创建时间");

                    b.Property<DateTimeOffset?>("ExecutedAt")
                        .HasColumnType("datetime(6)")
                        .HasComment("执行时间");

                    b.Property<decimal>("ExecutedQuantity")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(18,8)")
                        .HasComment("已执行数量");

                    b.Property<string>("FailureReason")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasComment("失败原因");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(18,8)")
                        .HasComment("交易价格");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(18,8)")
                        .HasComment("交易数量");

                    b.Property<decimal>("RemainingQuantity")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(18,8)")
                        .HasComment("剩余数量");

                    b.Property<int>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasComment("交易状态：1-待处理，2-已执行，3-失败，4-已取消，5-部分成交");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasComment("交易标的");

                    b.Property<decimal>("TotalValue")
                        .HasPrecision(18, 8)
                        .HasColumnType("decimal(18,8)")
                        .HasComment("交易总值");

                    b.Property<int>("TradeType")
                        .HasColumnType("int")
                        .HasComment("交易类型：1-买入，2-卖出");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasComment("用户ID");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Trades_CreatedAt");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Trades_Status");

                    b.HasIndex("Symbol")
                        .HasDatabaseName("IX_Trades_Symbol");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_Trades_UserId");

                    b.ToTable("Trades", (string)null);
                });

            modelBuilder.Entity("TradingEngine.Domain.AggregatesModel.RiskControlAggregate.RiskControl", b =>
                {
                    b.OwnsMany("TradingEngine.Domain.AggregatesModel.RiskControlAggregate.RiskAssessment", "RiskAssessments", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("char(36)")
                                .HasComment("风险评估ID");

                            b1.Property<DateTimeOffset>("AssessedAt")
                                .HasColumnType("datetime(6)")
                                .HasComment("评估时间");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(1000)
                                .HasColumnType("varchar(1000)")
                                .HasComment("风险描述");

                            b1.Property<decimal>("Price")
                                .HasPrecision(18, 8)
                                .HasColumnType("decimal(18,8)")
                                .HasComment("交易价格");

                            b1.Property<decimal>("Quantity")
                                .HasPrecision(18, 8)
                                .HasColumnType("decimal(18,8)")
                                .HasComment("交易数量");

                            b1.Property<Guid>("RiskControlId")
                                .HasColumnType("char(36)");

                            b1.Property<int>("RiskLevel")
                                .HasColumnType("int")
                                .HasComment("风险等级：1-低，2-中，3-高，4-严重");

                            b1.Property<string>("RiskTypes")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasComment("风险类型列表");

                            b1.Property<string>("Symbol")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("varchar(20)")
                                .HasComment("交易标的");

                            b1.Property<int>("TradeType")
                                .HasColumnType("int")
                                .HasComment("交易类型：1-买入，2-卖出");

                            b1.HasKey("Id");

                            b1.HasIndex("RiskControlId");

                            b1.ToTable("RiskAssessments", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("RiskControlId");
                        });

                    b.Navigation("RiskAssessments");
                });

            modelBuilder.Entity("TradingEngine.Domain.AggregatesModel.SettlementAggregate.Settlement", b =>
                {
                    b.OwnsMany("TradingEngine.Domain.AggregatesModel.SettlementAggregate.SettlementItem", "Items", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("char(36)")
                                .HasComment("结算项目ID");

                            b1.Property<decimal>("Amount")
                                .HasPrecision(18, 2)
                                .HasColumnType("decimal(18,2)")
                                .HasComment("结算金额");

                            b1.Property<DateTimeOffset>("CreatedAt")
                                .HasColumnType("datetime(6)")
                                .HasComment("创建时间");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("varchar(200)")
                                .HasComment("描述");

                            b1.Property<decimal>("Price")
                                .HasPrecision(18, 8)
                                .HasColumnType("decimal(18,8)")
                                .HasComment("价格");

                            b1.Property<decimal>("Quantity")
                                .HasPrecision(18, 8)
                                .HasColumnType("decimal(18,8)")
                                .HasComment("数量");

                            b1.Property<string>("ReferenceId")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("varchar(50)")
                                .HasComment("关联引用ID");

                            b1.Property<Guid>("SettlementId")
                                .HasColumnType("char(36)");

                            b1.Property<string>("Symbol")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("varchar(20)")
                                .HasComment("交易标的");

                            b1.HasKey("Id");

                            b1.HasIndex("SettlementId");

                            b1.ToTable("SettlementItems", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("SettlementId");
                        });

                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
